#include <bits/stdc++.h>
using namespace std;

class Graph{
    int v;
    map<int, list<int>> adjList;
    
    public:
    Graph(int vertex){
        v= vertex;
    }
    
    void addEdge(int u, int v, bool biDirected= true){
        adjList[u].push_back(v);
        if(biDirected){
            adjList[v].push_back(u);
        }
    }
    
    void printAdjList(){
        for(auto vertex: adjList){
            cout<<vertex.first<<"->";
            
            for(auto edge: vertex.second){
                cout<<edge<<",";
            }
            cout<<"\n";
        }
    }
    
    void bfs(int source){
        queue<int> q;
        // bool *visited= new bool[v+1]{false};
        vector<bool> visited(v+1, false);
        
        q.push(source);
        visited[source]= true;
        
        while(! q.empty()){
            for(auto connectedNode: adjList[q.front()]){
                if(!visited[connectedNode]){
                    q.push(connectedNode);
                    visited[connectedNode]= true;
                }
            }
            cout<<q.front()<<", ";
            q.pop();
        }
    }
    
};

int main()
{
    Graph g(6);
    
    g.addEdge(0,1);
    g.addEdge(1,2);
    g.addEdge(0,4);
    g.addEdge(2,4);
    g.addEdge(3,2);
    g.addEdge(3,4);
    g.addEdge(3,5);
    
    g.printAdjList();
    cout<<endl;
    g.bfs(2);
    
    return 0;
}
